Project Goals

Make UI mobile-first and responsive without breaking existing desktop visuals or behavior.

Execute in tiny, reversible steps with tests and visual checks per change.

Global Guardrails

Scope strictly to files explicitly listed in the current task; do not touch unrelated files.

Keep each change set under ~150 lines; break work into multiple small PRs.

No new dependencies without a written proposal and approval in the thread.

Preserve desktop parity; if an unavoidable change is required, call it out and justify before applying.

Avoid !important; keep selector specificity low; prefer classes over ids.

Do not mix styling paradigms; conform to the current project’s chosen approach (e.g., Tailwind or CSS Modules), and do not introduce a second framework.

Explain each change with rationale and a before/after summary.

Context and Inputs

Always load only relevant files via @file/@folder and open editors; do not infer the entire repo.

If required context is missing, ask for the specific files first rather than guessing.

Phases and Allowed Actions

Phase 0 (Audit): Read-only. Produce a Responsive Refactor Plan with tokens, breakpoints/container query policy, inventory of current styles, migration plan, and verification plan. No code edits.

Phase 1 (Tokens/Utilities): Add tokens and minimal utilities with zero visual change; create a mapping from existing values to tokens.

Phase 2 (Policy): Document mobile-first breakpoints and container query policy; add helpers/mixins; no component rewrites.

Phase 3 (Tests): Add viewport tests at 375px and 1280px for key pages/components; tests should pass pre-refactor.

Phase 4+ (Component/Page Refactors): Refactor one component or page at a time to mobile-first, using tokens and the policy; preserve desktop visuals; update tests.

Testing Requirements

Add or update Playwright/Cypress tests for 375px and 1280px for any modified component/page.

Provide commands to run tests; attach screenshots if the toolchain supports them.

Responsive Standards

Mobile-first CSS; enhance with min-width media queries; use container queries when component width is context-dependent.

Use tokens for colors, spacing, typography; convert px to rem for scalable typography/spacing.

Keep selectors flat; avoid deep nesting and ids; remove !important by fixing specificity/structure.

Safety and Security

Never expose secrets or introduce unsafe commands; follow repo security rules if present.

Do not modify CI/CD, secrets, or environment files without explicit approval.

Operational Guidance

Prefer “Edit Folder with AI” on a narrow folder to ensure consistency while keeping scope contained.

Use examples in rules and reference local files where possible to improve adherence.

Keep rules concise (<500 lines) and split into multiple files if needed under .cursor/rules/*.mdc for pattern-specific guidance.

Prompts to Use

Phase 0: “Produce a Responsive Refactor Plan: tokens, breakpoints/container queries, style inventory, migration plan (component/page order, file paths, diff sizes), verification plan (tests/screens). No code edits.”

Component refactor: “Refactor [ComponentName] only to mobile-first using tokens and policy; keep desktop unchanged; avoid !important; low specificity; update 375px/1280px tests; keep diff under ~150 lines.”

Definition of Done (per change)

Scope limited to the declared files.

Tests pass at 375px and 1280px.

Desktop visuals unchanged or justified.

Tokens used consistently; no new styling paradigm introduced.

File Locations (adjust to your repo)

Tokens: styles/tokens.css or theme config.

Responsive policy docs: docs/responsive-refactor.md.

Pattern rules (optional): .cursor/rules/*.mdc (e.g., css.mdc, components.mdc).

Notes

If Cursor attempts repo-wide edits or touches unrelated files, stop and request a narrower scope with explicit @file/@folder references.

Keep a CHANGELOG entry per refactor with prompt, files changed, tests added, and rationale.

This template is intentionally concise and enforceable by Cursor; commit it to the repo root so the guardrails apply across sessions